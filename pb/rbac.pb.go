// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: rbac.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_rbac_proto protoreflect.FileDescriptor

var file_rbac_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xfe, 0x0d, 0x0a, 0x04, 0x52, 0x62, 0x61, 0x63,
	0x12, 0x35, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x09, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x77, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x52,
	0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x52, 0x6f, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x12, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x52, 0x6f,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x0d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x43,
	0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x53, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x50, 0x61,
	0x74, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x68,
	0x44, 0x65, 0x6c, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65, 0x12, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x70,
	0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_rbac_proto_goTypes = []interface{}{
	(*DomainListReq)(nil),         // 0: proto.DomainListReq
	(*DomainCreateReq)(nil),       // 1: proto.DomainCreateReq
	(*DomainUpdateReq)(nil),       // 2: proto.DomainUpdateReq
	(*DefaultPkReq)(nil),          // 3: proto.DefaultPkReq
	(*AdminListReq)(nil),          // 4: proto.AdminListReq
	(*AdminCreateReq)(nil),        // 5: proto.AdminCreateReq
	(*AdminUpdateReq)(nil),        // 6: proto.AdminUpdateReq
	(*CheckPwdReq)(nil),           // 7: proto.CheckPwdReq
	(*RoleListReq)(nil),           // 8: proto.RoleListReq
	(*RoleCreateReq)(nil),         // 9: proto.RoleCreateReq
	(*RoleUpdateReq)(nil),         // 10: proto.RoleUpdateReq
	(*RolePermissionListReq)(nil), // 11: proto.RolePermissionListReq
	(*RolePermissionSetReq)(nil),  // 12: proto.RolePermissionSetReq
	(*PermissionListReq)(nil),     // 13: proto.PermissionListReq
	(*PermissionCreateReq)(nil),   // 14: proto.PermissionCreateReq
	(*PermissionUpdateReq)(nil),   // 15: proto.PermissionUpdateReq
	(*PermissionPathListReq)(nil), // 16: proto.PermissionPathListReq
	(*PermissionPathSetReq)(nil),  // 17: proto.PermissionPathSetReq
	(*PathListReq)(nil),           // 18: proto.PathListReq
	(*PathCreateReq)(nil),         // 19: proto.PathCreateReq
	(*PathUpdateReq)(nil),         // 20: proto.PathUpdateReq
	(*AdminMenuTreeReq)(nil),      // 21: proto.AdminMenuTreeReq
	(*DefaultRes)(nil),            // 22: proto.DefaultRes
}
var file_rbac_proto_depIdxs = []int32{
	0,  // 0: proto.Rbac.DomainList:input_type -> proto.DomainListReq
	1,  // 1: proto.Rbac.DomainCreate:input_type -> proto.DomainCreateReq
	2,  // 2: proto.Rbac.DomainUpdate:input_type -> proto.DomainUpdateReq
	3,  // 3: proto.Rbac.DomainDel:input_type -> proto.DefaultPkReq
	3,  // 4: proto.Rbac.DomainInfo:input_type -> proto.DefaultPkReq
	4,  // 5: proto.Rbac.AdminList:input_type -> proto.AdminListReq
	3,  // 6: proto.Rbac.AdminInfo:input_type -> proto.DefaultPkReq
	5,  // 7: proto.Rbac.AdminCreate:input_type -> proto.AdminCreateReq
	6,  // 8: proto.Rbac.AdminUpdate:input_type -> proto.AdminUpdateReq
	3,  // 9: proto.Rbac.AdminDel:input_type -> proto.DefaultPkReq
	7,  // 10: proto.Rbac.CheckPwd:input_type -> proto.CheckPwdReq
	8,  // 11: proto.Rbac.RoleList:input_type -> proto.RoleListReq
	3,  // 12: proto.Rbac.RoleInfo:input_type -> proto.DefaultPkReq
	9,  // 13: proto.Rbac.RoleCreate:input_type -> proto.RoleCreateReq
	10, // 14: proto.Rbac.RoleUpdate:input_type -> proto.RoleUpdateReq
	3,  // 15: proto.Rbac.RoleDel:input_type -> proto.DefaultPkReq
	11, // 16: proto.Rbac.RolePermissionList:input_type -> proto.RolePermissionListReq
	12, // 17: proto.Rbac.RolePermissionSet:input_type -> proto.RolePermissionSetReq
	13, // 18: proto.Rbac.PermissionList:input_type -> proto.PermissionListReq
	3,  // 19: proto.Rbac.PermissionInfo:input_type -> proto.DefaultPkReq
	14, // 20: proto.Rbac.PermissionCreate:input_type -> proto.PermissionCreateReq
	15, // 21: proto.Rbac.PermissionUpdate:input_type -> proto.PermissionUpdateReq
	3,  // 22: proto.Rbac.PermissionDel:input_type -> proto.DefaultPkReq
	16, // 23: proto.Rbac.PermissionPathList:input_type -> proto.PermissionPathListReq
	17, // 24: proto.Rbac.PermissionPathSet:input_type -> proto.PermissionPathSetReq
	18, // 25: proto.Rbac.PathList:input_type -> proto.PathListReq
	3,  // 26: proto.Rbac.PathInfo:input_type -> proto.DefaultPkReq
	19, // 27: proto.Rbac.PathCreate:input_type -> proto.PathCreateReq
	20, // 28: proto.Rbac.PathUpdate:input_type -> proto.PathUpdateReq
	3,  // 29: proto.Rbac.PathDel:input_type -> proto.DefaultPkReq
	21, // 30: proto.Rbac.AdminMenuTree:input_type -> proto.AdminMenuTreeReq
	22, // 31: proto.Rbac.DomainList:output_type -> proto.DefaultRes
	22, // 32: proto.Rbac.DomainCreate:output_type -> proto.DefaultRes
	22, // 33: proto.Rbac.DomainUpdate:output_type -> proto.DefaultRes
	22, // 34: proto.Rbac.DomainDel:output_type -> proto.DefaultRes
	22, // 35: proto.Rbac.DomainInfo:output_type -> proto.DefaultRes
	22, // 36: proto.Rbac.AdminList:output_type -> proto.DefaultRes
	22, // 37: proto.Rbac.AdminInfo:output_type -> proto.DefaultRes
	22, // 38: proto.Rbac.AdminCreate:output_type -> proto.DefaultRes
	22, // 39: proto.Rbac.AdminUpdate:output_type -> proto.DefaultRes
	22, // 40: proto.Rbac.AdminDel:output_type -> proto.DefaultRes
	22, // 41: proto.Rbac.CheckPwd:output_type -> proto.DefaultRes
	22, // 42: proto.Rbac.RoleList:output_type -> proto.DefaultRes
	22, // 43: proto.Rbac.RoleInfo:output_type -> proto.DefaultRes
	22, // 44: proto.Rbac.RoleCreate:output_type -> proto.DefaultRes
	22, // 45: proto.Rbac.RoleUpdate:output_type -> proto.DefaultRes
	22, // 46: proto.Rbac.RoleDel:output_type -> proto.DefaultRes
	22, // 47: proto.Rbac.RolePermissionList:output_type -> proto.DefaultRes
	22, // 48: proto.Rbac.RolePermissionSet:output_type -> proto.DefaultRes
	22, // 49: proto.Rbac.PermissionList:output_type -> proto.DefaultRes
	22, // 50: proto.Rbac.PermissionInfo:output_type -> proto.DefaultRes
	22, // 51: proto.Rbac.PermissionCreate:output_type -> proto.DefaultRes
	22, // 52: proto.Rbac.PermissionUpdate:output_type -> proto.DefaultRes
	22, // 53: proto.Rbac.PermissionDel:output_type -> proto.DefaultRes
	22, // 54: proto.Rbac.PermissionPathList:output_type -> proto.DefaultRes
	22, // 55: proto.Rbac.PermissionPathSet:output_type -> proto.DefaultRes
	22, // 56: proto.Rbac.PathList:output_type -> proto.DefaultRes
	22, // 57: proto.Rbac.PathInfo:output_type -> proto.DefaultRes
	22, // 58: proto.Rbac.PathCreate:output_type -> proto.DefaultRes
	22, // 59: proto.Rbac.PathUpdate:output_type -> proto.DefaultRes
	22, // 60: proto.Rbac.PathDel:output_type -> proto.DefaultRes
	22, // 61: proto.Rbac.AdminMenuTree:output_type -> proto.DefaultRes
	31, // [31:62] is the sub-list for method output_type
	0,  // [0:31] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_rbac_proto_init() }
func file_rbac_proto_init() {
	if File_rbac_proto != nil {
		return
	}
	file_base_proto_init()
	file_admin_entity_proto_init()
	file_role_entity_proto_init()
	file_path_entity_proto_init()
	file_permission_entity_proto_init()
	file_domain_entity_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rbac_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rbac_proto_goTypes,
		DependencyIndexes: file_rbac_proto_depIdxs,
	}.Build()
	File_rbac_proto = out.File
	file_rbac_proto_rawDesc = nil
	file_rbac_proto_goTypes = nil
	file_rbac_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RbacClient is the client API for Rbac service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RbacClient interface {
	DomainList(ctx context.Context, in *DomainListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	DomainCreate(ctx context.Context, in *DomainCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	DomainUpdate(ctx context.Context, in *DomainUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	DomainDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	DomainInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AdminList(ctx context.Context, in *AdminListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AdminInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AdminCreate(ctx context.Context, in *AdminCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AdminUpdate(ctx context.Context, in *AdminUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AdminDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	CheckPwd(ctx context.Context, in *CheckPwdReq, opts ...grpc.CallOption) (*DefaultRes, error)
	RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	RoleInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	RoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	RoleDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	RolePermissionList(ctx context.Context, in *RolePermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	RolePermissionSet(ctx context.Context, in *RolePermissionSetReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PermissionList(ctx context.Context, in *PermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PermissionInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PermissionCreate(ctx context.Context, in *PermissionCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PermissionUpdate(ctx context.Context, in *PermissionUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PermissionDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PermissionPathList(ctx context.Context, in *PermissionPathListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PermissionPathSet(ctx context.Context, in *PermissionPathSetReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PathList(ctx context.Context, in *PathListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PathInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PathCreate(ctx context.Context, in *PathCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PathUpdate(ctx context.Context, in *PathUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	PathDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AdminMenuTree(ctx context.Context, in *AdminMenuTreeReq, opts ...grpc.CallOption) (*DefaultRes, error)
}

type rbacClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacClient(cc grpc.ClientConnInterface) RbacClient {
	return &rbacClient{cc}
}

func (c *rbacClient) DomainList(ctx context.Context, in *DomainListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/DomainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) DomainCreate(ctx context.Context, in *DomainCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/DomainCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) DomainUpdate(ctx context.Context, in *DomainUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/DomainUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) DomainDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/DomainDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) DomainInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/DomainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AdminList(ctx context.Context, in *AdminListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/AdminList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AdminInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/AdminInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AdminCreate(ctx context.Context, in *AdminCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/AdminCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AdminUpdate(ctx context.Context, in *AdminUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/AdminUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AdminDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/AdminDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) CheckPwd(ctx context.Context, in *CheckPwdReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/CheckPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/RoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) RoleInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/RoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) RoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/RoleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) RoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/RoleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) RoleDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/RoleDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) RolePermissionList(ctx context.Context, in *RolePermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/RolePermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) RolePermissionSet(ctx context.Context, in *RolePermissionSetReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/RolePermissionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PermissionList(ctx context.Context, in *PermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PermissionInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PermissionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PermissionCreate(ctx context.Context, in *PermissionCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PermissionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PermissionUpdate(ctx context.Context, in *PermissionUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PermissionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PermissionDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PermissionDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PermissionPathList(ctx context.Context, in *PermissionPathListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PermissionPathList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PermissionPathSet(ctx context.Context, in *PermissionPathSetReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PermissionPathSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PathList(ctx context.Context, in *PathListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PathList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PathInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PathInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PathCreate(ctx context.Context, in *PathCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PathCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PathUpdate(ctx context.Context, in *PathUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PathUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) PathDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/PathDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AdminMenuTree(ctx context.Context, in *AdminMenuTreeReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/AdminMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacServer is the server API for Rbac service.
type RbacServer interface {
	DomainList(context.Context, *DomainListReq) (*DefaultRes, error)
	DomainCreate(context.Context, *DomainCreateReq) (*DefaultRes, error)
	DomainUpdate(context.Context, *DomainUpdateReq) (*DefaultRes, error)
	DomainDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	DomainInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	AdminList(context.Context, *AdminListReq) (*DefaultRes, error)
	AdminInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	AdminCreate(context.Context, *AdminCreateReq) (*DefaultRes, error)
	AdminUpdate(context.Context, *AdminUpdateReq) (*DefaultRes, error)
	AdminDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	CheckPwd(context.Context, *CheckPwdReq) (*DefaultRes, error)
	RoleList(context.Context, *RoleListReq) (*DefaultRes, error)
	RoleInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	RoleCreate(context.Context, *RoleCreateReq) (*DefaultRes, error)
	RoleUpdate(context.Context, *RoleUpdateReq) (*DefaultRes, error)
	RoleDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	RolePermissionList(context.Context, *RolePermissionListReq) (*DefaultRes, error)
	RolePermissionSet(context.Context, *RolePermissionSetReq) (*DefaultRes, error)
	PermissionList(context.Context, *PermissionListReq) (*DefaultRes, error)
	PermissionInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	PermissionCreate(context.Context, *PermissionCreateReq) (*DefaultRes, error)
	PermissionUpdate(context.Context, *PermissionUpdateReq) (*DefaultRes, error)
	PermissionDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	PermissionPathList(context.Context, *PermissionPathListReq) (*DefaultRes, error)
	PermissionPathSet(context.Context, *PermissionPathSetReq) (*DefaultRes, error)
	PathList(context.Context, *PathListReq) (*DefaultRes, error)
	PathInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	PathCreate(context.Context, *PathCreateReq) (*DefaultRes, error)
	PathUpdate(context.Context, *PathUpdateReq) (*DefaultRes, error)
	PathDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	AdminMenuTree(context.Context, *AdminMenuTreeReq) (*DefaultRes, error)
}

// UnimplementedRbacServer can be embedded to have forward compatible implementations.
type UnimplementedRbacServer struct {
}

func (*UnimplementedRbacServer) DomainList(context.Context, *DomainListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainList not implemented")
}
func (*UnimplementedRbacServer) DomainCreate(context.Context, *DomainCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCreate not implemented")
}
func (*UnimplementedRbacServer) DomainUpdate(context.Context, *DomainUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainUpdate not implemented")
}
func (*UnimplementedRbacServer) DomainDel(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainDel not implemented")
}
func (*UnimplementedRbacServer) DomainInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainInfo not implemented")
}
func (*UnimplementedRbacServer) AdminList(context.Context, *AdminListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminList not implemented")
}
func (*UnimplementedRbacServer) AdminInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminInfo not implemented")
}
func (*UnimplementedRbacServer) AdminCreate(context.Context, *AdminCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreate not implemented")
}
func (*UnimplementedRbacServer) AdminUpdate(context.Context, *AdminUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdate not implemented")
}
func (*UnimplementedRbacServer) AdminDel(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDel not implemented")
}
func (*UnimplementedRbacServer) CheckPwd(context.Context, *CheckPwdReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPwd not implemented")
}
func (*UnimplementedRbacServer) RoleList(context.Context, *RoleListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (*UnimplementedRbacServer) RoleInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleInfo not implemented")
}
func (*UnimplementedRbacServer) RoleCreate(context.Context, *RoleCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleCreate not implemented")
}
func (*UnimplementedRbacServer) RoleUpdate(context.Context, *RoleUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleUpdate not implemented")
}
func (*UnimplementedRbacServer) RoleDel(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDel not implemented")
}
func (*UnimplementedRbacServer) RolePermissionList(context.Context, *RolePermissionListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolePermissionList not implemented")
}
func (*UnimplementedRbacServer) RolePermissionSet(context.Context, *RolePermissionSetReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolePermissionSet not implemented")
}
func (*UnimplementedRbacServer) PermissionList(context.Context, *PermissionListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionList not implemented")
}
func (*UnimplementedRbacServer) PermissionInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionInfo not implemented")
}
func (*UnimplementedRbacServer) PermissionCreate(context.Context, *PermissionCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionCreate not implemented")
}
func (*UnimplementedRbacServer) PermissionUpdate(context.Context, *PermissionUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionUpdate not implemented")
}
func (*UnimplementedRbacServer) PermissionDel(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionDel not implemented")
}
func (*UnimplementedRbacServer) PermissionPathList(context.Context, *PermissionPathListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionPathList not implemented")
}
func (*UnimplementedRbacServer) PermissionPathSet(context.Context, *PermissionPathSetReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionPathSet not implemented")
}
func (*UnimplementedRbacServer) PathList(context.Context, *PathListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathList not implemented")
}
func (*UnimplementedRbacServer) PathInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathInfo not implemented")
}
func (*UnimplementedRbacServer) PathCreate(context.Context, *PathCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathCreate not implemented")
}
func (*UnimplementedRbacServer) PathUpdate(context.Context, *PathUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathUpdate not implemented")
}
func (*UnimplementedRbacServer) PathDel(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PathDel not implemented")
}
func (*UnimplementedRbacServer) AdminMenuTree(context.Context, *AdminMenuTreeReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminMenuTree not implemented")
}

func RegisterRbacServer(s *grpc.Server, srv RbacServer) {
	s.RegisterService(&_Rbac_serviceDesc, srv)
}

func _Rbac_DomainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).DomainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/DomainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).DomainList(ctx, req.(*DomainListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_DomainCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).DomainCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/DomainCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).DomainCreate(ctx, req.(*DomainCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_DomainUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).DomainUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/DomainUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).DomainUpdate(ctx, req.(*DomainUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_DomainDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).DomainDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/DomainDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).DomainDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_DomainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).DomainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/DomainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).DomainInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/AdminList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AdminList(ctx, req.(*AdminListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/AdminInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AdminInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AdminCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AdminCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/AdminCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AdminCreate(ctx, req.(*AdminCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AdminUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AdminUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/AdminUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AdminUpdate(ctx, req.(*AdminUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AdminDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AdminDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/AdminDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AdminDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_CheckPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).CheckPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/CheckPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).CheckPwd(ctx, req.(*CheckPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/RoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).RoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_RoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).RoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/RoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).RoleInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_RoleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).RoleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/RoleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).RoleCreate(ctx, req.(*RoleCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_RoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).RoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/RoleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).RoleUpdate(ctx, req.(*RoleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_RoleDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).RoleDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/RoleDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).RoleDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_RolePermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).RolePermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/RolePermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).RolePermissionList(ctx, req.(*RolePermissionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_RolePermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).RolePermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/RolePermissionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).RolePermissionSet(ctx, req.(*RolePermissionSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PermissionList(ctx, req.(*PermissionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PermissionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PermissionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PermissionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PermissionInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PermissionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PermissionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PermissionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PermissionCreate(ctx, req.(*PermissionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PermissionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PermissionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PermissionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PermissionUpdate(ctx, req.(*PermissionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PermissionDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PermissionDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PermissionDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PermissionDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PermissionPathList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionPathListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PermissionPathList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PermissionPathList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PermissionPathList(ctx, req.(*PermissionPathListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PermissionPathSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionPathSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PermissionPathSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PermissionPathSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PermissionPathSet(ctx, req.(*PermissionPathSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PathList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PathList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PathList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PathList(ctx, req.(*PathListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PathInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PathInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PathInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PathInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PathCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PathCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PathCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PathCreate(ctx, req.(*PathCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PathUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PathUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PathUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PathUpdate(ctx, req.(*PathUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_PathDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).PathDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/PathDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).PathDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AdminMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AdminMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/AdminMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AdminMenuTree(ctx, req.(*AdminMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rbac_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Rbac",
	HandlerType: (*RbacServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DomainList",
			Handler:    _Rbac_DomainList_Handler,
		},
		{
			MethodName: "DomainCreate",
			Handler:    _Rbac_DomainCreate_Handler,
		},
		{
			MethodName: "DomainUpdate",
			Handler:    _Rbac_DomainUpdate_Handler,
		},
		{
			MethodName: "DomainDel",
			Handler:    _Rbac_DomainDel_Handler,
		},
		{
			MethodName: "DomainInfo",
			Handler:    _Rbac_DomainInfo_Handler,
		},
		{
			MethodName: "AdminList",
			Handler:    _Rbac_AdminList_Handler,
		},
		{
			MethodName: "AdminInfo",
			Handler:    _Rbac_AdminInfo_Handler,
		},
		{
			MethodName: "AdminCreate",
			Handler:    _Rbac_AdminCreate_Handler,
		},
		{
			MethodName: "AdminUpdate",
			Handler:    _Rbac_AdminUpdate_Handler,
		},
		{
			MethodName: "AdminDel",
			Handler:    _Rbac_AdminDel_Handler,
		},
		{
			MethodName: "CheckPwd",
			Handler:    _Rbac_CheckPwd_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _Rbac_RoleList_Handler,
		},
		{
			MethodName: "RoleInfo",
			Handler:    _Rbac_RoleInfo_Handler,
		},
		{
			MethodName: "RoleCreate",
			Handler:    _Rbac_RoleCreate_Handler,
		},
		{
			MethodName: "RoleUpdate",
			Handler:    _Rbac_RoleUpdate_Handler,
		},
		{
			MethodName: "RoleDel",
			Handler:    _Rbac_RoleDel_Handler,
		},
		{
			MethodName: "RolePermissionList",
			Handler:    _Rbac_RolePermissionList_Handler,
		},
		{
			MethodName: "RolePermissionSet",
			Handler:    _Rbac_RolePermissionSet_Handler,
		},
		{
			MethodName: "PermissionList",
			Handler:    _Rbac_PermissionList_Handler,
		},
		{
			MethodName: "PermissionInfo",
			Handler:    _Rbac_PermissionInfo_Handler,
		},
		{
			MethodName: "PermissionCreate",
			Handler:    _Rbac_PermissionCreate_Handler,
		},
		{
			MethodName: "PermissionUpdate",
			Handler:    _Rbac_PermissionUpdate_Handler,
		},
		{
			MethodName: "PermissionDel",
			Handler:    _Rbac_PermissionDel_Handler,
		},
		{
			MethodName: "PermissionPathList",
			Handler:    _Rbac_PermissionPathList_Handler,
		},
		{
			MethodName: "PermissionPathSet",
			Handler:    _Rbac_PermissionPathSet_Handler,
		},
		{
			MethodName: "PathList",
			Handler:    _Rbac_PathList_Handler,
		},
		{
			MethodName: "PathInfo",
			Handler:    _Rbac_PathInfo_Handler,
		},
		{
			MethodName: "PathCreate",
			Handler:    _Rbac_PathCreate_Handler,
		},
		{
			MethodName: "PathUpdate",
			Handler:    _Rbac_PathUpdate_Handler,
		},
		{
			MethodName: "PathDel",
			Handler:    _Rbac_PathDel_Handler,
		},
		{
			MethodName: "AdminMenuTree",
			Handler:    _Rbac_AdminMenuTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac.proto",
}
