// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rbac.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("rbac.proto", fileDescriptor_f88ffdd966c9c7ed) }

var fileDescriptor_f88ffdd966c9c7ed = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x2f, 0x14, 0x35, 0x03, 0x4d, 0x9b, 0x4d, 0xa1, 0x28, 0xf0, 0x02, 0x5c, 0x8c, 0x88,
	0x01, 0x15, 0x0a, 0x48, 0x94, 0x08, 0x09, 0xa9, 0x96, 0x22, 0x03, 0x17, 0x6e, 0xeb, 0x66, 0x4b,
	0x2d, 0x1c, 0xaf, 0xb1, 0xb7, 0x07, 0x9e, 0x8d, 0x97, 0x43, 0xfb, 0xc7, 0xeb, 0xdd, 0x75, 0xbc,
	0xce, 0x9e, 0x12, 0x7d, 0x33, 0xbf, 0x99, 0xc9, 0x7c, 0x19, 0x1b, 0xa0, 0xce, 0xf0, 0x75, 0x54,
	0xd5, 0x94, 0x51, 0x74, 0x20, 0x3e, 0x16, 0x90, 0xe1, 0x86, 0x48, 0x69, 0x81, 0xf0, 0x66, 0x9b,
	0x97, 0x11, 0x29, 0x59, 0xce, 0xfe, 0x2a, 0x6d, 0x56, 0xd3, 0x82, 0x38, 0x52, 0x85, 0xd9, 0xad,
	0x2d, 0x9d, 0x55, 0xa4, 0xde, 0xe6, 0x4d, 0x93, 0x53, 0x07, 0x9f, 0x6f, 0xe8, 0x16, 0x3b, 0x35,
	0x97, 0xff, 0x4e, 0xe0, 0x5e, 0x9a, 0xe1, 0x6b, 0xf4, 0x06, 0x1e, 0x24, 0x2b, 0x91, 0x70, 0x95,
	0x37, 0x0c, 0x9d, 0xca, 0x78, 0xd4, 0x49, 0x29, 0xf9, 0xb3, 0x98, 0xb5, 0x2a, 0xb9, 0xc1, 0x77,
	0x05, 0x4b, 0x49, 0x83, 0xde, 0xc1, 0x91, 0xe2, 0x3e, 0xd7, 0x04, 0x33, 0x82, 0x1e, 0x5b, 0xa4,
	0x14, 0x47, 0xd9, 0x1f, 0xd5, 0xa6, 0xcf, 0x4a, 0x71, 0x80, 0x7d, 0x05, 0xa0, 0xd8, 0x15, 0x29,
	0xd0, 0xdc, 0x4e, 0x58, 0xff, 0x1e, 0xa0, 0x5e, 0xeb, 0x5f, 0xf9, 0xb5, 0xbc, 0xa1, 0x7b, 0x63,
	0xbc, 0xd9, 0x27, 0x6e, 0x88, 0xd8, 0x4d, 0x4b, 0x69, 0x65, 0x8c, 0x0a, 0xea, 0x75, 0x0e, 0x0f,
	0x25, 0xa5, 0xf6, 0xf9, 0xc8, 0xec, 0xe6, 0x5d, 0xa7, 0x26, 0xd5, 0x36, 0x2d, 0xd2, 0xbb, 0xcc,
	0x18, 0x26, 0x92, 0x0c, 0xd9, 0xe5, 0x7b, 0x98, 0x4a, 0x28, 0xa5, 0x05, 0x11, 0x8b, 0x39, 0x33,
	0x1b, 0xb6, 0xaa, 0xc7, 0x7b, 0x9d, 0xf7, 0x8d, 0x30, 0xed, 0xbd, 0x29, 0x0e, 0xb2, 0x27, 0x92,
	0x5d, 0xeb, 0xbf, 0xfa, 0xde, 0x53, 0x2f, 0x61, 0x92, 0xe8, 0x81, 0x91, 0x8a, 0x8f, 0xcc, 0x1a,
	0x2b, 0x26, 0xc8, 0x47, 0x7e, 0x50, 0x1c, 0x52, 0x36, 0x9e, 0x1a, 0xad, 0xbc, 0x2e, 0xb6, 0x9c,
	0x32, 0xd1, 0xe4, 0xbc, 0x1e, 0x2e, 0xe1, 0x50, 0x70, 0x21, 0x16, 0x7e, 0x81, 0xb9, 0x60, 0xba,
	0x3d, 0x8a, 0xb5, 0x3c, 0x33, 0x7a, 0xda, 0xa1, 0x81, 0x3a, 0x2b, 0x40, 0x4e, 0x1d, 0xee, 0xe8,
	0xd3, 0x9d, 0x65, 0x86, 0x6d, 0xfd, 0x08, 0xc7, 0x89, 0x33, 0xc9, 0x13, 0x95, 0xb5, 0xd7, 0x14,
	0x6f, 0x2d, 0x3e, 0xc8, 0xac, 0x4b, 0x98, 0x19, 0xa8, 0xb2, 0x6c, 0xd1, 0x6b, 0xee, 0x35, 0xce,
	0xae, 0xa1, 0xec, 0xeb, 0xd7, 0xf0, 0x9a, 0x78, 0x0e, 0x53, 0xa3, 0x46, 0xa8, 0x95, 0x1d, 0xb9,
	0xc6, 0xec, 0xd6, 0xb2, 0xb2, 0x1f, 0xf2, 0x58, 0x69, 0x27, 0x9b, 0x56, 0xf6, 0x22, 0x9e, 0x2b,
	0xd3, 0x33, 0xb4, 0x57, 0x36, 0xd2, 0x39, 0x56, 0x4c, 0xf0, 0x95, 0x71, 0xc8, 0xb9, 0xb2, 0x4e,
	0x1a, 0xe1, 0x9c, 0x2b, 0xeb, 0x24, 0xcf, 0x95, 0xf1, 0xa4, 0x10, 0x6b, 0x2e, 0xe0, 0x48, 0x3c,
	0xad, 0x12, 0x52, 0xde, 0x7d, 0xaf, 0x09, 0xb1, 0x9f, 0x93, 0xad, 0x3a, 0x00, 0xbf, 0x84, 0xc9,
	0xc8, 0x3b, 0xe4, 0x58, 0x89, 0x57, 0xf4, 0x57, 0x5e, 0x72, 0xe4, 0x39, 0x1c, 0x88, 0xef, 0xc8,
	0x89, 0xec, 0x48, 0xfd, 0x00, 0x53, 0xfb, 0x3a, 0xf5, 0xc5, 0xd9, 0xf2, 0xee, 0xe1, 0x2e, 0xe1,
	0xe7, 0x61, 0x14, 0xbd, 0xa8, 0xb2, 0x8b, 0x2a, 0xcb, 0xee, 0x8b, 0x68, 0xfc, 0x3f, 0x00, 0x00,
	0xff, 0xff, 0x3b, 0xeb, 0xd3, 0xb3, 0xd9, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RbacClient is the client API for Rbac service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RbacClient interface {
	MDomainList(ctx context.Context, in *DomainListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MDomainCreate(ctx context.Context, in *DomainCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MDomainUpdate(ctx context.Context, in *DomainUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MDomainDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MDomainInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminList(ctx context.Context, in *AdminListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminCreate(ctx context.Context, in *AdminCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminUpdate(ctx context.Context, in *AdminUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminRoleList(ctx context.Context, in *AdminRoleListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminRoleSet(ctx context.Context, in *AdminRoleSetReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminPermission(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRoleInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRoleDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRolePermissionList(ctx context.Context, in *RolePermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRolePermissionSet(ctx context.Context, in *RolePermissionSetReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionList(ctx context.Context, in *PermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionCreate(ctx context.Context, in *PermissionCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionUpdate(ctx context.Context, in *PermissionUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionPathList(ctx context.Context, in *PermissionPathListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionPathSet(ctx context.Context, in *PermissionPathSetReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPathList(ctx context.Context, in *PathListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPathInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPathCreate(ctx context.Context, in *PathCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPathUpdate(ctx context.Context, in *PathUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPathDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AdminMenuTree(ctx context.Context, in *AdminMenuTreeReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AdminInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*LoginRes, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	RolePermission(ctx context.Context, in *RolePermissionReq, opts ...grpc.CallOption) (*DefaultRes, error)
}

type rbacClient struct {
	cc *grpc.ClientConn
}

func NewRbacClient(cc *grpc.ClientConn) RbacClient {
	return &rbacClient{cc}
}

func (c *rbacClient) MDomainList(ctx context.Context, in *DomainListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MDomainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MDomainCreate(ctx context.Context, in *DomainCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MDomainCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MDomainUpdate(ctx context.Context, in *DomainUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MDomainUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MDomainDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MDomainDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MDomainInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MDomainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminList(ctx context.Context, in *AdminListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MAdminList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MAdminInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminCreate(ctx context.Context, in *AdminCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MAdminCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminUpdate(ctx context.Context, in *AdminUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MAdminUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MAdminDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminRoleList(ctx context.Context, in *AdminRoleListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MAdminRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminRoleSet(ctx context.Context, in *AdminRoleSetReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MAdminRoleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminPermission(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MAdminPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRoleInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MRoleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MRoleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRoleDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MRoleDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRolePermissionList(ctx context.Context, in *RolePermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MRolePermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRolePermissionSet(ctx context.Context, in *RolePermissionSetReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MRolePermissionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionList(ctx context.Context, in *PermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPermissionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionCreate(ctx context.Context, in *PermissionCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPermissionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionUpdate(ctx context.Context, in *PermissionUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPermissionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPermissionDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionPathList(ctx context.Context, in *PermissionPathListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPermissionPathList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionPathSet(ctx context.Context, in *PermissionPathSetReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPermissionPathSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPathList(ctx context.Context, in *PathListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPathList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPathInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPathInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPathCreate(ctx context.Context, in *PathCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPathCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPathUpdate(ctx context.Context, in *PathUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPathUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPathDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/MPathDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AdminMenuTree(ctx context.Context, in *AdminMenuTreeReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/AdminMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AdminInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/AdminInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) RolePermission(ctx context.Context, in *RolePermissionReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/proto.Rbac/RolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacServer is the server API for Rbac service.
type RbacServer interface {
	MDomainList(context.Context, *DomainListReq) (*DefaultRes, error)
	MDomainCreate(context.Context, *DomainCreateReq) (*DefaultRes, error)
	MDomainUpdate(context.Context, *DomainUpdateReq) (*DefaultRes, error)
	MDomainDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MDomainInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MAdminList(context.Context, *AdminListReq) (*DefaultRes, error)
	MAdminInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MAdminCreate(context.Context, *AdminCreateReq) (*DefaultRes, error)
	MAdminUpdate(context.Context, *AdminUpdateReq) (*DefaultRes, error)
	MAdminDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MAdminRoleList(context.Context, *AdminRoleListReq) (*DefaultRes, error)
	MAdminRoleSet(context.Context, *AdminRoleSetReq) (*DefaultRes, error)
	MAdminPermission(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MRoleList(context.Context, *RoleListReq) (*DefaultRes, error)
	MRoleInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MRoleCreate(context.Context, *RoleCreateReq) (*DefaultRes, error)
	MRoleUpdate(context.Context, *RoleUpdateReq) (*DefaultRes, error)
	MRoleDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MRolePermissionList(context.Context, *RolePermissionListReq) (*DefaultRes, error)
	MRolePermissionSet(context.Context, *RolePermissionSetReq) (*DefaultRes, error)
	MPermissionList(context.Context, *PermissionListReq) (*DefaultRes, error)
	MPermissionInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MPermissionCreate(context.Context, *PermissionCreateReq) (*DefaultRes, error)
	MPermissionUpdate(context.Context, *PermissionUpdateReq) (*DefaultRes, error)
	MPermissionDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MPermissionPathList(context.Context, *PermissionPathListReq) (*DefaultRes, error)
	MPermissionPathSet(context.Context, *PermissionPathSetReq) (*DefaultRes, error)
	MPathList(context.Context, *PathListReq) (*DefaultRes, error)
	MPathInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MPathCreate(context.Context, *PathCreateReq) (*DefaultRes, error)
	MPathUpdate(context.Context, *PathUpdateReq) (*DefaultRes, error)
	MPathDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	AdminMenuTree(context.Context, *AdminMenuTreeReq) (*DefaultRes, error)
	AdminInfo(context.Context, *DefaultPkReq) (*LoginRes, error)
	Login(context.Context, *LoginReq) (*LoginRes, error)
	RolePermission(context.Context, *RolePermissionReq) (*DefaultRes, error)
}

// UnimplementedRbacServer can be embedded to have forward compatible implementations.
type UnimplementedRbacServer struct {
}

func (*UnimplementedRbacServer) MDomainList(ctx context.Context, req *DomainListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDomainList not implemented")
}
func (*UnimplementedRbacServer) MDomainCreate(ctx context.Context, req *DomainCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDomainCreate not implemented")
}
func (*UnimplementedRbacServer) MDomainUpdate(ctx context.Context, req *DomainUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDomainUpdate not implemented")
}
func (*UnimplementedRbacServer) MDomainDel(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDomainDel not implemented")
}
func (*UnimplementedRbacServer) MDomainInfo(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDomainInfo not implemented")
}
func (*UnimplementedRbacServer) MAdminList(ctx context.Context, req *AdminListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminList not implemented")
}
func (*UnimplementedRbacServer) MAdminInfo(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminInfo not implemented")
}
func (*UnimplementedRbacServer) MAdminCreate(ctx context.Context, req *AdminCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminCreate not implemented")
}
func (*UnimplementedRbacServer) MAdminUpdate(ctx context.Context, req *AdminUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminUpdate not implemented")
}
func (*UnimplementedRbacServer) MAdminDel(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminDel not implemented")
}
func (*UnimplementedRbacServer) MAdminRoleList(ctx context.Context, req *AdminRoleListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminRoleList not implemented")
}
func (*UnimplementedRbacServer) MAdminRoleSet(ctx context.Context, req *AdminRoleSetReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminRoleSet not implemented")
}
func (*UnimplementedRbacServer) MAdminPermission(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminPermission not implemented")
}
func (*UnimplementedRbacServer) MRoleList(ctx context.Context, req *RoleListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoleList not implemented")
}
func (*UnimplementedRbacServer) MRoleInfo(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoleInfo not implemented")
}
func (*UnimplementedRbacServer) MRoleCreate(ctx context.Context, req *RoleCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoleCreate not implemented")
}
func (*UnimplementedRbacServer) MRoleUpdate(ctx context.Context, req *RoleUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoleUpdate not implemented")
}
func (*UnimplementedRbacServer) MRoleDel(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoleDel not implemented")
}
func (*UnimplementedRbacServer) MRolePermissionList(ctx context.Context, req *RolePermissionListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRolePermissionList not implemented")
}
func (*UnimplementedRbacServer) MRolePermissionSet(ctx context.Context, req *RolePermissionSetReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRolePermissionSet not implemented")
}
func (*UnimplementedRbacServer) MPermissionList(ctx context.Context, req *PermissionListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionList not implemented")
}
func (*UnimplementedRbacServer) MPermissionInfo(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionInfo not implemented")
}
func (*UnimplementedRbacServer) MPermissionCreate(ctx context.Context, req *PermissionCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionCreate not implemented")
}
func (*UnimplementedRbacServer) MPermissionUpdate(ctx context.Context, req *PermissionUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionUpdate not implemented")
}
func (*UnimplementedRbacServer) MPermissionDel(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionDel not implemented")
}
func (*UnimplementedRbacServer) MPermissionPathList(ctx context.Context, req *PermissionPathListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionPathList not implemented")
}
func (*UnimplementedRbacServer) MPermissionPathSet(ctx context.Context, req *PermissionPathSetReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionPathSet not implemented")
}
func (*UnimplementedRbacServer) MPathList(ctx context.Context, req *PathListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPathList not implemented")
}
func (*UnimplementedRbacServer) MPathInfo(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPathInfo not implemented")
}
func (*UnimplementedRbacServer) MPathCreate(ctx context.Context, req *PathCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPathCreate not implemented")
}
func (*UnimplementedRbacServer) MPathUpdate(ctx context.Context, req *PathUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPathUpdate not implemented")
}
func (*UnimplementedRbacServer) MPathDel(ctx context.Context, req *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPathDel not implemented")
}
func (*UnimplementedRbacServer) AdminMenuTree(ctx context.Context, req *AdminMenuTreeReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminMenuTree not implemented")
}
func (*UnimplementedRbacServer) AdminInfo(ctx context.Context, req *DefaultPkReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminInfo not implemented")
}
func (*UnimplementedRbacServer) Login(ctx context.Context, req *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedRbacServer) RolePermission(ctx context.Context, req *RolePermissionReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolePermission not implemented")
}

func RegisterRbacServer(s *grpc.Server, srv RbacServer) {
	s.RegisterService(&_Rbac_serviceDesc, srv)
}

func _Rbac_MDomainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MDomainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MDomainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MDomainList(ctx, req.(*DomainListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MDomainCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MDomainCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MDomainCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MDomainCreate(ctx, req.(*DomainCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MDomainUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MDomainUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MDomainUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MDomainUpdate(ctx, req.(*DomainUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MDomainDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MDomainDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MDomainDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MDomainDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MDomainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MDomainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MDomainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MDomainInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MAdminList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminList(ctx, req.(*AdminListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MAdminInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MAdminCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminCreate(ctx, req.(*AdminCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MAdminUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminUpdate(ctx, req.(*AdminUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MAdminDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MAdminRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminRoleList(ctx, req.(*AdminRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminRoleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRoleSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminRoleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MAdminRoleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminRoleSet(ctx, req.(*AdminRoleSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MAdminPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminPermission(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRoleInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRoleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRoleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MRoleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRoleCreate(ctx, req.(*RoleCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MRoleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRoleUpdate(ctx, req.(*RoleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRoleDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRoleDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MRoleDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRoleDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRolePermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRolePermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MRolePermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRolePermissionList(ctx, req.(*RolePermissionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRolePermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRolePermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MRolePermissionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRolePermissionSet(ctx, req.(*RolePermissionSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionList(ctx, req.(*PermissionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPermissionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPermissionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionCreate(ctx, req.(*PermissionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPermissionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionUpdate(ctx, req.(*PermissionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPermissionDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionPathList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionPathListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionPathList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPermissionPathList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionPathList(ctx, req.(*PermissionPathListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionPathSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionPathSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionPathSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPermissionPathSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionPathSet(ctx, req.(*PermissionPathSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPathList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPathList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPathList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPathList(ctx, req.(*PathListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPathInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPathInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPathInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPathInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPathCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPathCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPathCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPathCreate(ctx, req.(*PathCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPathUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPathUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPathUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPathUpdate(ctx, req.(*PathUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPathDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPathDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/MPathDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPathDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AdminMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AdminMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/AdminMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AdminMenuTree(ctx, req.(*AdminMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/AdminInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AdminInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_RolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).RolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rbac/RolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).RolePermission(ctx, req.(*RolePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rbac_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Rbac",
	HandlerType: (*RbacServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MDomainList",
			Handler:    _Rbac_MDomainList_Handler,
		},
		{
			MethodName: "MDomainCreate",
			Handler:    _Rbac_MDomainCreate_Handler,
		},
		{
			MethodName: "MDomainUpdate",
			Handler:    _Rbac_MDomainUpdate_Handler,
		},
		{
			MethodName: "MDomainDel",
			Handler:    _Rbac_MDomainDel_Handler,
		},
		{
			MethodName: "MDomainInfo",
			Handler:    _Rbac_MDomainInfo_Handler,
		},
		{
			MethodName: "MAdminList",
			Handler:    _Rbac_MAdminList_Handler,
		},
		{
			MethodName: "MAdminInfo",
			Handler:    _Rbac_MAdminInfo_Handler,
		},
		{
			MethodName: "MAdminCreate",
			Handler:    _Rbac_MAdminCreate_Handler,
		},
		{
			MethodName: "MAdminUpdate",
			Handler:    _Rbac_MAdminUpdate_Handler,
		},
		{
			MethodName: "MAdminDel",
			Handler:    _Rbac_MAdminDel_Handler,
		},
		{
			MethodName: "MAdminRoleList",
			Handler:    _Rbac_MAdminRoleList_Handler,
		},
		{
			MethodName: "MAdminRoleSet",
			Handler:    _Rbac_MAdminRoleSet_Handler,
		},
		{
			MethodName: "MAdminPermission",
			Handler:    _Rbac_MAdminPermission_Handler,
		},
		{
			MethodName: "MRoleList",
			Handler:    _Rbac_MRoleList_Handler,
		},
		{
			MethodName: "MRoleInfo",
			Handler:    _Rbac_MRoleInfo_Handler,
		},
		{
			MethodName: "MRoleCreate",
			Handler:    _Rbac_MRoleCreate_Handler,
		},
		{
			MethodName: "MRoleUpdate",
			Handler:    _Rbac_MRoleUpdate_Handler,
		},
		{
			MethodName: "MRoleDel",
			Handler:    _Rbac_MRoleDel_Handler,
		},
		{
			MethodName: "MRolePermissionList",
			Handler:    _Rbac_MRolePermissionList_Handler,
		},
		{
			MethodName: "MRolePermissionSet",
			Handler:    _Rbac_MRolePermissionSet_Handler,
		},
		{
			MethodName: "MPermissionList",
			Handler:    _Rbac_MPermissionList_Handler,
		},
		{
			MethodName: "MPermissionInfo",
			Handler:    _Rbac_MPermissionInfo_Handler,
		},
		{
			MethodName: "MPermissionCreate",
			Handler:    _Rbac_MPermissionCreate_Handler,
		},
		{
			MethodName: "MPermissionUpdate",
			Handler:    _Rbac_MPermissionUpdate_Handler,
		},
		{
			MethodName: "MPermissionDel",
			Handler:    _Rbac_MPermissionDel_Handler,
		},
		{
			MethodName: "MPermissionPathList",
			Handler:    _Rbac_MPermissionPathList_Handler,
		},
		{
			MethodName: "MPermissionPathSet",
			Handler:    _Rbac_MPermissionPathSet_Handler,
		},
		{
			MethodName: "MPathList",
			Handler:    _Rbac_MPathList_Handler,
		},
		{
			MethodName: "MPathInfo",
			Handler:    _Rbac_MPathInfo_Handler,
		},
		{
			MethodName: "MPathCreate",
			Handler:    _Rbac_MPathCreate_Handler,
		},
		{
			MethodName: "MPathUpdate",
			Handler:    _Rbac_MPathUpdate_Handler,
		},
		{
			MethodName: "MPathDel",
			Handler:    _Rbac_MPathDel_Handler,
		},
		{
			MethodName: "AdminMenuTree",
			Handler:    _Rbac_AdminMenuTree_Handler,
		},
		{
			MethodName: "AdminInfo",
			Handler:    _Rbac_AdminInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Rbac_Login_Handler,
		},
		{
			MethodName: "RolePermission",
			Handler:    _Rbac_RolePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac.proto",
}
