// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.1
// source: rbac.proto

package rbac_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RbacClient is the client API for Rbac service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RbacClient interface {
	MDomainList(ctx context.Context, in *DomainListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MDomainCreate(ctx context.Context, in *DomainCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MDomainUpdate(ctx context.Context, in *DomainUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MDomainDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MDomainInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminList(ctx context.Context, in *AdminListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminCreate(ctx context.Context, in *AdminCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminUpdate(ctx context.Context, in *AdminUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminRoleList(ctx context.Context, in *AdminRoleListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminRoleSet(ctx context.Context, in *AdminRoleSetReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MAdminPermission(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRoleInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRoleDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRolePermissionList(ctx context.Context, in *RolePermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MRolePermissionSet(ctx context.Context, in *RolePermissionSetReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionList(ctx context.Context, in *PermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionCreate(ctx context.Context, in *PermissionCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionUpdate(ctx context.Context, in *PermissionUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionPathList(ctx context.Context, in *PermissionPathListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPermissionPathSet(ctx context.Context, in *PermissionPathSetReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPathList(ctx context.Context, in *PathListReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPathInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPathCreate(ctx context.Context, in *PathCreateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPathUpdate(ctx context.Context, in *PathUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error)
	MPathDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AdminMenuTree(ctx context.Context, in *AdminMenuTreeReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AdminInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*LoginRes, error)
	AccountEdit(ctx context.Context, in *AccountEditReq, opts ...grpc.CallOption) (*DefaultRes, error)
	AccountInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	RolePermission(ctx context.Context, in *RolePermissionReq, opts ...grpc.CallOption) (*DefaultRes, error)
	GetDomainPolicy(ctx context.Context, in *GetDomainPolicyReq, opts ...grpc.CallOption) (*DefaultRes, error)
}

type rbacClient struct {
	cc grpc.ClientConnInterface
}

func NewRbacClient(cc grpc.ClientConnInterface) RbacClient {
	return &rbacClient{cc}
}

func (c *rbacClient) MDomainList(ctx context.Context, in *DomainListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MDomainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MDomainCreate(ctx context.Context, in *DomainCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MDomainCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MDomainUpdate(ctx context.Context, in *DomainUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MDomainUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MDomainDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MDomainDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MDomainInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MDomainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminList(ctx context.Context, in *AdminListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MAdminList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MAdminInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminCreate(ctx context.Context, in *AdminCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MAdminCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminUpdate(ctx context.Context, in *AdminUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MAdminUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MAdminDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminRoleList(ctx context.Context, in *AdminRoleListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MAdminRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminRoleSet(ctx context.Context, in *AdminRoleSetReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MAdminRoleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MAdminPermission(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MAdminPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRoleInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRoleCreate(ctx context.Context, in *RoleCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MRoleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRoleUpdate(ctx context.Context, in *RoleUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MRoleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRoleDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MRoleDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRolePermissionList(ctx context.Context, in *RolePermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MRolePermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MRolePermissionSet(ctx context.Context, in *RolePermissionSetReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MRolePermissionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionList(ctx context.Context, in *PermissionListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPermissionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionCreate(ctx context.Context, in *PermissionCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPermissionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionUpdate(ctx context.Context, in *PermissionUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPermissionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPermissionDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionPathList(ctx context.Context, in *PermissionPathListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPermissionPathList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPermissionPathSet(ctx context.Context, in *PermissionPathSetReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPermissionPathSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPathList(ctx context.Context, in *PathListReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPathList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPathInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPathInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPathCreate(ctx context.Context, in *PathCreateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPathCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPathUpdate(ctx context.Context, in *PathUpdateReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPathUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) MPathDel(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/MPathDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AdminMenuTree(ctx context.Context, in *AdminMenuTreeReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/AdminMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AdminInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/AdminInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AccountEdit(ctx context.Context, in *AccountEditReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/AccountEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) AccountInfo(ctx context.Context, in *DefaultPkReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/AccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) RolePermission(ctx context.Context, in *RolePermissionReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/RolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rbacClient) GetDomainPolicy(ctx context.Context, in *GetDomainPolicyReq, opts ...grpc.CallOption) (*DefaultRes, error) {
	out := new(DefaultRes)
	err := c.cc.Invoke(ctx, "/rbacProto.Rbac/GetDomainPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RbacServer is the server API for Rbac service.
// All implementations should embed UnimplementedRbacServer
// for forward compatibility
type RbacServer interface {
	MDomainList(context.Context, *DomainListReq) (*DefaultRes, error)
	MDomainCreate(context.Context, *DomainCreateReq) (*DefaultRes, error)
	MDomainUpdate(context.Context, *DomainUpdateReq) (*DefaultRes, error)
	MDomainDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MDomainInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MAdminList(context.Context, *AdminListReq) (*DefaultRes, error)
	MAdminInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MAdminCreate(context.Context, *AdminCreateReq) (*DefaultRes, error)
	MAdminUpdate(context.Context, *AdminUpdateReq) (*DefaultRes, error)
	MAdminDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MAdminRoleList(context.Context, *AdminRoleListReq) (*DefaultRes, error)
	MAdminRoleSet(context.Context, *AdminRoleSetReq) (*DefaultRes, error)
	MAdminPermission(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MRoleList(context.Context, *RoleListReq) (*DefaultRes, error)
	MRoleInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MRoleCreate(context.Context, *RoleCreateReq) (*DefaultRes, error)
	MRoleUpdate(context.Context, *RoleUpdateReq) (*DefaultRes, error)
	MRoleDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MRolePermissionList(context.Context, *RolePermissionListReq) (*DefaultRes, error)
	MRolePermissionSet(context.Context, *RolePermissionSetReq) (*DefaultRes, error)
	MPermissionList(context.Context, *PermissionListReq) (*DefaultRes, error)
	MPermissionInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MPermissionCreate(context.Context, *PermissionCreateReq) (*DefaultRes, error)
	MPermissionUpdate(context.Context, *PermissionUpdateReq) (*DefaultRes, error)
	MPermissionDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MPermissionPathList(context.Context, *PermissionPathListReq) (*DefaultRes, error)
	MPermissionPathSet(context.Context, *PermissionPathSetReq) (*DefaultRes, error)
	MPathList(context.Context, *PathListReq) (*DefaultRes, error)
	MPathInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	MPathCreate(context.Context, *PathCreateReq) (*DefaultRes, error)
	MPathUpdate(context.Context, *PathUpdateReq) (*DefaultRes, error)
	MPathDel(context.Context, *DefaultPkReq) (*DefaultRes, error)
	AdminMenuTree(context.Context, *AdminMenuTreeReq) (*DefaultRes, error)
	AdminInfo(context.Context, *DefaultPkReq) (*LoginRes, error)
	AccountEdit(context.Context, *AccountEditReq) (*DefaultRes, error)
	AccountInfo(context.Context, *DefaultPkReq) (*DefaultRes, error)
	Login(context.Context, *LoginReq) (*LoginRes, error)
	RolePermission(context.Context, *RolePermissionReq) (*DefaultRes, error)
	GetDomainPolicy(context.Context, *GetDomainPolicyReq) (*DefaultRes, error)
}

// UnimplementedRbacServer should be embedded to have forward compatible implementations.
type UnimplementedRbacServer struct {
}

func (UnimplementedRbacServer) MDomainList(context.Context, *DomainListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDomainList not implemented")
}
func (UnimplementedRbacServer) MDomainCreate(context.Context, *DomainCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDomainCreate not implemented")
}
func (UnimplementedRbacServer) MDomainUpdate(context.Context, *DomainUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDomainUpdate not implemented")
}
func (UnimplementedRbacServer) MDomainDel(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDomainDel not implemented")
}
func (UnimplementedRbacServer) MDomainInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MDomainInfo not implemented")
}
func (UnimplementedRbacServer) MAdminList(context.Context, *AdminListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminList not implemented")
}
func (UnimplementedRbacServer) MAdminInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminInfo not implemented")
}
func (UnimplementedRbacServer) MAdminCreate(context.Context, *AdminCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminCreate not implemented")
}
func (UnimplementedRbacServer) MAdminUpdate(context.Context, *AdminUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminUpdate not implemented")
}
func (UnimplementedRbacServer) MAdminDel(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminDel not implemented")
}
func (UnimplementedRbacServer) MAdminRoleList(context.Context, *AdminRoleListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminRoleList not implemented")
}
func (UnimplementedRbacServer) MAdminRoleSet(context.Context, *AdminRoleSetReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminRoleSet not implemented")
}
func (UnimplementedRbacServer) MAdminPermission(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MAdminPermission not implemented")
}
func (UnimplementedRbacServer) MRoleList(context.Context, *RoleListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoleList not implemented")
}
func (UnimplementedRbacServer) MRoleInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoleInfo not implemented")
}
func (UnimplementedRbacServer) MRoleCreate(context.Context, *RoleCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoleCreate not implemented")
}
func (UnimplementedRbacServer) MRoleUpdate(context.Context, *RoleUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoleUpdate not implemented")
}
func (UnimplementedRbacServer) MRoleDel(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRoleDel not implemented")
}
func (UnimplementedRbacServer) MRolePermissionList(context.Context, *RolePermissionListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRolePermissionList not implemented")
}
func (UnimplementedRbacServer) MRolePermissionSet(context.Context, *RolePermissionSetReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MRolePermissionSet not implemented")
}
func (UnimplementedRbacServer) MPermissionList(context.Context, *PermissionListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionList not implemented")
}
func (UnimplementedRbacServer) MPermissionInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionInfo not implemented")
}
func (UnimplementedRbacServer) MPermissionCreate(context.Context, *PermissionCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionCreate not implemented")
}
func (UnimplementedRbacServer) MPermissionUpdate(context.Context, *PermissionUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionUpdate not implemented")
}
func (UnimplementedRbacServer) MPermissionDel(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionDel not implemented")
}
func (UnimplementedRbacServer) MPermissionPathList(context.Context, *PermissionPathListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionPathList not implemented")
}
func (UnimplementedRbacServer) MPermissionPathSet(context.Context, *PermissionPathSetReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPermissionPathSet not implemented")
}
func (UnimplementedRbacServer) MPathList(context.Context, *PathListReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPathList not implemented")
}
func (UnimplementedRbacServer) MPathInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPathInfo not implemented")
}
func (UnimplementedRbacServer) MPathCreate(context.Context, *PathCreateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPathCreate not implemented")
}
func (UnimplementedRbacServer) MPathUpdate(context.Context, *PathUpdateReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPathUpdate not implemented")
}
func (UnimplementedRbacServer) MPathDel(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MPathDel not implemented")
}
func (UnimplementedRbacServer) AdminMenuTree(context.Context, *AdminMenuTreeReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminMenuTree not implemented")
}
func (UnimplementedRbacServer) AdminInfo(context.Context, *DefaultPkReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminInfo not implemented")
}
func (UnimplementedRbacServer) AccountEdit(context.Context, *AccountEditReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountEdit not implemented")
}
func (UnimplementedRbacServer) AccountInfo(context.Context, *DefaultPkReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInfo not implemented")
}
func (UnimplementedRbacServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRbacServer) RolePermission(context.Context, *RolePermissionReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolePermission not implemented")
}
func (UnimplementedRbacServer) GetDomainPolicy(context.Context, *GetDomainPolicyReq) (*DefaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainPolicy not implemented")
}

// UnsafeRbacServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RbacServer will
// result in compilation errors.
type UnsafeRbacServer interface {
	mustEmbedUnimplementedRbacServer()
}

func RegisterRbacServer(s grpc.ServiceRegistrar, srv RbacServer) {
	s.RegisterService(&Rbac_ServiceDesc, srv)
}

func _Rbac_MDomainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MDomainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MDomainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MDomainList(ctx, req.(*DomainListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MDomainCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MDomainCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MDomainCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MDomainCreate(ctx, req.(*DomainCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MDomainUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MDomainUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MDomainUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MDomainUpdate(ctx, req.(*DomainUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MDomainDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MDomainDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MDomainDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MDomainDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MDomainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MDomainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MDomainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MDomainInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MAdminList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminList(ctx, req.(*AdminListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MAdminInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MAdminCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminCreate(ctx, req.(*AdminCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MAdminUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminUpdate(ctx, req.(*AdminUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MAdminDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MAdminRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminRoleList(ctx, req.(*AdminRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminRoleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRoleSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminRoleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MAdminRoleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminRoleSet(ctx, req.(*AdminRoleSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MAdminPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MAdminPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MAdminPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MAdminPermission(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRoleInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRoleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRoleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MRoleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRoleCreate(ctx, req.(*RoleCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MRoleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRoleUpdate(ctx, req.(*RoleUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRoleDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRoleDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MRoleDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRoleDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRolePermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRolePermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MRolePermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRolePermissionList(ctx, req.(*RolePermissionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MRolePermissionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MRolePermissionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MRolePermissionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MRolePermissionSet(ctx, req.(*RolePermissionSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionList(ctx, req.(*PermissionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPermissionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPermissionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionCreate(ctx, req.(*PermissionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPermissionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionUpdate(ctx, req.(*PermissionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPermissionDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionPathList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionPathListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionPathList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPermissionPathList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionPathList(ctx, req.(*PermissionPathListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPermissionPathSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionPathSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPermissionPathSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPermissionPathSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPermissionPathSet(ctx, req.(*PermissionPathSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPathList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPathList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPathList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPathList(ctx, req.(*PathListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPathInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPathInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPathInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPathInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPathCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPathCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPathCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPathCreate(ctx, req.(*PathCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPathUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPathUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPathUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPathUpdate(ctx, req.(*PathUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_MPathDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).MPathDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/MPathDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).MPathDel(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AdminMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminMenuTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AdminMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/AdminMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AdminMenuTree(ctx, req.(*AdminMenuTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/AdminInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AdminInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AccountEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AccountEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/AccountEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AccountEdit(ctx, req.(*AccountEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_AccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).AccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/AccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).AccountInfo(ctx, req.(*DefaultPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_RolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).RolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/RolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).RolePermission(ctx, req.(*RolePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rbac_GetDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RbacServer).GetDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbacProto.Rbac/GetDomainPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RbacServer).GetDomainPolicy(ctx, req.(*GetDomainPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Rbac_ServiceDesc is the grpc.ServiceDesc for Rbac service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rbac_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rbacProto.Rbac",
	HandlerType: (*RbacServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MDomainList",
			Handler:    _Rbac_MDomainList_Handler,
		},
		{
			MethodName: "MDomainCreate",
			Handler:    _Rbac_MDomainCreate_Handler,
		},
		{
			MethodName: "MDomainUpdate",
			Handler:    _Rbac_MDomainUpdate_Handler,
		},
		{
			MethodName: "MDomainDel",
			Handler:    _Rbac_MDomainDel_Handler,
		},
		{
			MethodName: "MDomainInfo",
			Handler:    _Rbac_MDomainInfo_Handler,
		},
		{
			MethodName: "MAdminList",
			Handler:    _Rbac_MAdminList_Handler,
		},
		{
			MethodName: "MAdminInfo",
			Handler:    _Rbac_MAdminInfo_Handler,
		},
		{
			MethodName: "MAdminCreate",
			Handler:    _Rbac_MAdminCreate_Handler,
		},
		{
			MethodName: "MAdminUpdate",
			Handler:    _Rbac_MAdminUpdate_Handler,
		},
		{
			MethodName: "MAdminDel",
			Handler:    _Rbac_MAdminDel_Handler,
		},
		{
			MethodName: "MAdminRoleList",
			Handler:    _Rbac_MAdminRoleList_Handler,
		},
		{
			MethodName: "MAdminRoleSet",
			Handler:    _Rbac_MAdminRoleSet_Handler,
		},
		{
			MethodName: "MAdminPermission",
			Handler:    _Rbac_MAdminPermission_Handler,
		},
		{
			MethodName: "MRoleList",
			Handler:    _Rbac_MRoleList_Handler,
		},
		{
			MethodName: "MRoleInfo",
			Handler:    _Rbac_MRoleInfo_Handler,
		},
		{
			MethodName: "MRoleCreate",
			Handler:    _Rbac_MRoleCreate_Handler,
		},
		{
			MethodName: "MRoleUpdate",
			Handler:    _Rbac_MRoleUpdate_Handler,
		},
		{
			MethodName: "MRoleDel",
			Handler:    _Rbac_MRoleDel_Handler,
		},
		{
			MethodName: "MRolePermissionList",
			Handler:    _Rbac_MRolePermissionList_Handler,
		},
		{
			MethodName: "MRolePermissionSet",
			Handler:    _Rbac_MRolePermissionSet_Handler,
		},
		{
			MethodName: "MPermissionList",
			Handler:    _Rbac_MPermissionList_Handler,
		},
		{
			MethodName: "MPermissionInfo",
			Handler:    _Rbac_MPermissionInfo_Handler,
		},
		{
			MethodName: "MPermissionCreate",
			Handler:    _Rbac_MPermissionCreate_Handler,
		},
		{
			MethodName: "MPermissionUpdate",
			Handler:    _Rbac_MPermissionUpdate_Handler,
		},
		{
			MethodName: "MPermissionDel",
			Handler:    _Rbac_MPermissionDel_Handler,
		},
		{
			MethodName: "MPermissionPathList",
			Handler:    _Rbac_MPermissionPathList_Handler,
		},
		{
			MethodName: "MPermissionPathSet",
			Handler:    _Rbac_MPermissionPathSet_Handler,
		},
		{
			MethodName: "MPathList",
			Handler:    _Rbac_MPathList_Handler,
		},
		{
			MethodName: "MPathInfo",
			Handler:    _Rbac_MPathInfo_Handler,
		},
		{
			MethodName: "MPathCreate",
			Handler:    _Rbac_MPathCreate_Handler,
		},
		{
			MethodName: "MPathUpdate",
			Handler:    _Rbac_MPathUpdate_Handler,
		},
		{
			MethodName: "MPathDel",
			Handler:    _Rbac_MPathDel_Handler,
		},
		{
			MethodName: "AdminMenuTree",
			Handler:    _Rbac_AdminMenuTree_Handler,
		},
		{
			MethodName: "AdminInfo",
			Handler:    _Rbac_AdminInfo_Handler,
		},
		{
			MethodName: "AccountEdit",
			Handler:    _Rbac_AccountEdit_Handler,
		},
		{
			MethodName: "AccountInfo",
			Handler:    _Rbac_AccountInfo_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Rbac_Login_Handler,
		},
		{
			MethodName: "RolePermission",
			Handler:    _Rbac_RolePermission_Handler,
		},
		{
			MethodName: "GetDomainPolicy",
			Handler:    _Rbac_GetDomainPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac.proto",
}
